################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################

########################################################################
# Project setup
########################################################################
cmake_minimum_required(VERSION 2.8.8)
project(fty_common_nut)
enable_language(CXX)
enable_testing()

set(SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}")
set(CMAKE_EXPORT_COMPILE_COMMANDS 1)
# Select flags
SET(CMAKE_C_FLAGS_RELEASE "-O3")

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/builds/cmake/Modules)

# Will be used to add flags to pkg-config useful when apps want to statically link
set(pkg_config_libs_private "")
set(pkg_config_names_private "")

########################################################################
# options
########################################################################
if (NOT CMAKE_BUILD_TYPE)
    if (EXISTS "${SOURCE_DIR}/.git")
        set (CMAKE_BUILD_TYPE Debug)
    else ()
# http://xit0.org/2013/04/cmake-use-git-branch-and-commit-details-in-project/
# http://stackoverflow.com/questions/6797395/cmake-execute-process-always-fails-with-no-such-file-or-directory-when-i-cal
        execute_process(
            COMMAND git rev-parse --show-toplevel
            WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
            RESULT_VARIABLE git_result
            OUTPUT_VARIABLE git_root
            OUTPUT_STRIP_TRAILING_WHITESPACE
        )
        message(STATUS "git workspace root [${git_result}]: ${git_root}")
        if ( "${git_result}" STREQUAL "0" )
            set (CMAKE_BUILD_TYPE Debug)
        else ()
            set (CMAKE_BUILD_TYPE Release)
        endif ()
    endif ()
endif ()
if (${CMAKE_BUILD_TYPE} STREQUAL "Debug")
    OPTION (ENABLE_DRAFTS "Build and install draft classes and methods" ON)
else ()
    OPTION (ENABLE_DRAFTS "Build and install draft classes and methods" OFF)
endif ()
IF (ENABLE_DRAFTS)
    ADD_DEFINITIONS (-DFTY_COMMON_NUT_BUILD_DRAFT_API)
ENDIF (ENABLE_DRAFTS)

########################################################################
# platform.h
########################################################################
include(CheckIncludeFile)
CHECK_INCLUDE_FILE("linux/wireless.h" HAVE_LINUX_WIRELESS_H)
CHECK_INCLUDE_FILE("net/if_media.h" HAVE_NET_IF_MEDIA_H)

include(CheckFunctionExists)
CHECK_FUNCTION_EXISTS("getifaddrs" HAVE_GETIFADDRS)
CHECK_FUNCTION_EXISTS("freeifaddrs" HAVE_FREEIFADDRS)

include(CheckIncludeFiles)
check_include_files("sys/socket.h;net/if.h" HAVE_NET_IF_H)
if (NOT HAVE_NET_IF_H)
    CHECK_INCLUDE_FILE("net/if.h" HAVE_NET_IF_H)
endif()

file(REMOVE "${SOURCE_DIR}/src/platform.h")

file(WRITE "${CMAKE_BINARY_DIR}/platform.h.in" "
#cmakedefine HAVE_LINUX_WIRELESS_H
#cmakedefine HAVE_NET_IF_H
#cmakedefine HAVE_NET_IF_MEDIA_H
#cmakedefine HAVE_GETIFADDRS
#cmakedefine HAVE_FREEIFADDRS
")

configure_file("${CMAKE_BINARY_DIR}/platform.h.in" "${CMAKE_BINARY_DIR}/platform.h")

#The MSVC C compiler is too out of date,
#so the sources have to be compiled as c++
if (MSVC)
    enable_language(CXX)
    file(GLOB sources "${SOURCE_DIR}/src/*.cc")
    set_source_files_properties(
        ${sources}
        PROPERTIES LANGUAGE CXX
    )
    set(MORE_LIBRARIES ws2_32 Rpcrt4 Iphlpapi)
endif()

# specific case of windows UWP
if( "${CMAKE_SYSTEM_NAME}" STREQUAL "WindowsStore" AND "${CMAKE_SYSTEM_VERSION}" STREQUAL "10.0")
  ADD_DEFINITIONS(-DZMQ_HAVE_WINDOWS_UWP)
  ADD_DEFINITIONS(-D_WIN32_WINNT=_WIN32_WINNT_WIN10)
endif()


# required libraries for mingw
if (MINGW)
    set(MORE_LIBRARIES -lws2_32 -lrpcrt4 -liphlpapi)
endif()

# required libraries for cygwin
if (CYGWIN)
    set(MORE_LIBRARIES)
endif()

list(APPEND CMAKE_MODULE_PATH "${SOURCE_DIR}")
set(OPTIONAL_LIBRARIES)
set(OPTIONAL_LIBRARIES_STATIC)

########################################################################
# CXXTOOLS dependency
########################################################################
find_package(cxxtools REQUIRED)
IF (CXXTOOLS_FOUND)
    include_directories(${CXXTOOLS_INCLUDE_DIRS})
    list(APPEND MORE_LIBRARIES ${CXXTOOLS_LIBRARIES})
  IF (PC_CXXTOOLS_FOUND)
      set(pkg_config_names_private "${pkg_config_names_private} cxxtools")
      list(APPEND OPTIONAL_LIBRARIES_STATIC ${PC_CXXTOOLS_STATIC_LDFLAGS})
  ELSE (PC_CXXTOOLS_FOUND)
      set(pkg_config_libs_private "${pkg_config_libs_private} -lcxxtools")
  ENDIF (PC_CXXTOOLS_FOUND)
ELSE (CXXTOOLS_FOUND)
    message( FATAL_ERROR "cxxtools not found." )
ENDIF (CXXTOOLS_FOUND)

########################################################################
# LIBSODIUM dependency
########################################################################
find_package(libsodium REQUIRED)
IF (LIBSODIUM_FOUND)
    include_directories(${LIBSODIUM_INCLUDE_DIRS})
    list(APPEND MORE_LIBRARIES ${LIBSODIUM_LIBRARIES})
  IF (PC_LIBSODIUM_FOUND)
      set(pkg_config_names_private "${pkg_config_names_private} libsodium")
      list(APPEND OPTIONAL_LIBRARIES_STATIC ${PC_LIBSODIUM_STATIC_LDFLAGS})
  ELSE (PC_LIBSODIUM_FOUND)
      set(pkg_config_libs_private "${pkg_config_libs_private} -lsodium")
  ENDIF (PC_LIBSODIUM_FOUND)
ELSE (LIBSODIUM_FOUND)
    message( FATAL_ERROR "libsodium not found." )
ENDIF (LIBSODIUM_FOUND)

########################################################################
# LIBZMQ dependency
########################################################################
find_package(libzmq REQUIRED)
IF (LIBZMQ_FOUND)
    include_directories(${LIBZMQ_INCLUDE_DIRS})
    list(APPEND MORE_LIBRARIES ${LIBZMQ_LIBRARIES})
  IF (PC_LIBZMQ_FOUND)
      set(pkg_config_names_private "${pkg_config_names_private} libzmq")
      list(APPEND OPTIONAL_LIBRARIES_STATIC ${PC_LIBZMQ_STATIC_LDFLAGS})
  ELSE (PC_LIBZMQ_FOUND)
      set(pkg_config_libs_private "${pkg_config_libs_private} -lzmq")
  ENDIF (PC_LIBZMQ_FOUND)
ELSE (LIBZMQ_FOUND)
    message( FATAL_ERROR "libzmq not found." )
ENDIF (LIBZMQ_FOUND)

########################################################################
# CZMQ dependency
########################################################################
find_package(czmq REQUIRED)
IF (CZMQ_FOUND)
    include_directories(${CZMQ_INCLUDE_DIRS})
    list(APPEND MORE_LIBRARIES ${CZMQ_LIBRARIES})
  IF (PC_CZMQ_FOUND)
      set(pkg_config_names_private "${pkg_config_names_private} libczmq >= 3.0.2")
      list(APPEND OPTIONAL_LIBRARIES_STATIC ${PC_CZMQ_STATIC_LDFLAGS})
  ELSE (PC_CZMQ_FOUND)
      set(pkg_config_libs_private "${pkg_config_libs_private} -lczmq")
  ENDIF (PC_CZMQ_FOUND)
ELSE (CZMQ_FOUND)
    message( FATAL_ERROR "czmq not found." )
ENDIF (CZMQ_FOUND)

########################################################################
# MALAMUTE dependency
########################################################################
find_package(malamute REQUIRED)
IF (MALAMUTE_FOUND)
    include_directories(${MALAMUTE_INCLUDE_DIRS})
    list(APPEND MORE_LIBRARIES ${MALAMUTE_LIBRARIES})
  IF (PC_MALAMUTE_FOUND)
      set(pkg_config_names_private "${pkg_config_names_private} libmlm >= 1.0.0")
      list(APPEND OPTIONAL_LIBRARIES_STATIC ${PC_MALAMUTE_STATIC_LDFLAGS})
  ELSE (PC_MALAMUTE_FOUND)
      set(pkg_config_libs_private "${pkg_config_libs_private} -lmlm")
  ENDIF (PC_MALAMUTE_FOUND)
ELSE (MALAMUTE_FOUND)
    message( FATAL_ERROR "malamute not found." )
ENDIF (MALAMUTE_FOUND)

########################################################################
# LOG4CPLUS dependency
########################################################################
find_package(log4cplus REQUIRED)
IF (LOG4CPLUS_FOUND)
    include_directories(${LOG4CPLUS_INCLUDE_DIRS})
    list(APPEND MORE_LIBRARIES ${LOG4CPLUS_LIBRARIES})
  IF (PC_LOG4CPLUS_FOUND)
      set(pkg_config_names_private "${pkg_config_names_private} log4cplus")
      list(APPEND OPTIONAL_LIBRARIES_STATIC ${PC_LOG4CPLUS_STATIC_LDFLAGS})
  ELSE (PC_LOG4CPLUS_FOUND)
      set(pkg_config_libs_private "${pkg_config_libs_private} -llog4cplus")
  ENDIF (PC_LOG4CPLUS_FOUND)
ELSE (LOG4CPLUS_FOUND)
    message( FATAL_ERROR "log4cplus not found." )
ENDIF (LOG4CPLUS_FOUND)

########################################################################
# FTY-COMMON-LOGGING dependency
########################################################################
find_package(fty-common-logging REQUIRED)
IF (FTY-COMMON-LOGGING_FOUND)
    include_directories(${FTY-COMMON-LOGGING_INCLUDE_DIRS})
    list(APPEND MORE_LIBRARIES ${FTY-COMMON-LOGGING_LIBRARIES})
  IF (PC_FTY-COMMON-LOGGING_FOUND)
      set(pkg_config_names_private "${pkg_config_names_private} libfty_common_logging")
      list(APPEND OPTIONAL_LIBRARIES_STATIC ${PC_FTY-COMMON-LOGGING_STATIC_LDFLAGS})
  ELSE (PC_FTY-COMMON-LOGGING_FOUND)
      set(pkg_config_libs_private "${pkg_config_libs_private} -lfty-common-logging")
  ENDIF (PC_FTY-COMMON-LOGGING_FOUND)
ELSE (FTY-COMMON-LOGGING_FOUND)
    message( FATAL_ERROR "fty-common-logging not found." )
ENDIF (FTY-COMMON-LOGGING_FOUND)

########################################################################
# FTY-COMMON dependency
########################################################################
find_package(fty-common REQUIRED)
IF (FTY-COMMON_FOUND)
    include_directories(${FTY-COMMON_INCLUDE_DIRS})
    list(APPEND MORE_LIBRARIES ${FTY-COMMON_LIBRARIES})
  IF (PC_FTY-COMMON_FOUND)
      set(pkg_config_names_private "${pkg_config_names_private} libfty_common")
      list(APPEND OPTIONAL_LIBRARIES_STATIC ${PC_FTY-COMMON_STATIC_LDFLAGS})
  ELSE (PC_FTY-COMMON_FOUND)
      set(pkg_config_libs_private "${pkg_config_libs_private} -lfty-common")
  ENDIF (PC_FTY-COMMON_FOUND)
ELSE (FTY-COMMON_FOUND)
    message( FATAL_ERROR "fty-common not found." )
ENDIF (FTY-COMMON_FOUND)

########################################################################
# FTY-PROTO dependency
########################################################################
find_package(fty-proto REQUIRED)
IF (FTY-PROTO_FOUND)
    include_directories(${FTY-PROTO_INCLUDE_DIRS})
    list(APPEND MORE_LIBRARIES ${FTY-PROTO_LIBRARIES})
  IF (PC_FTY-PROTO_FOUND)
      set(pkg_config_names_private "${pkg_config_names_private} libfty_proto >= 1.0.0")
      list(APPEND OPTIONAL_LIBRARIES_STATIC ${PC_FTY-PROTO_STATIC_LDFLAGS})
  ELSE (PC_FTY-PROTO_FOUND)
      set(pkg_config_libs_private "${pkg_config_libs_private} -lfty_proto")
  ENDIF (PC_FTY-PROTO_FOUND)
ELSE (FTY-PROTO_FOUND)
    message( FATAL_ERROR "fty-proto not found." )
ENDIF (FTY-PROTO_FOUND)

########################################################################
# FTY-COMMON-MLM dependency
########################################################################
find_package(fty-common-mlm REQUIRED)
IF (FTY-COMMON-MLM_FOUND)
    include_directories(${FTY-COMMON-MLM_INCLUDE_DIRS})
    list(APPEND MORE_LIBRARIES ${FTY-COMMON-MLM_LIBRARIES})
  IF (PC_FTY-COMMON-MLM_FOUND)
      set(pkg_config_names_private "${pkg_config_names_private} libfty_common_mlm")
      list(APPEND OPTIONAL_LIBRARIES_STATIC ${PC_FTY-COMMON-MLM_STATIC_LDFLAGS})
  ELSE (PC_FTY-COMMON-MLM_FOUND)
      set(pkg_config_libs_private "${pkg_config_libs_private} -lfty-common-mlm")
  ENDIF (PC_FTY-COMMON-MLM_FOUND)
ELSE (FTY-COMMON-MLM_FOUND)
    message( FATAL_ERROR "fty-common-mlm not found." )
ENDIF (FTY-COMMON-MLM_FOUND)

########################################################################
# OPENSSL dependency
########################################################################
find_package(openssl REQUIRED)
IF (OPENSSL_FOUND)
    include_directories(${OPENSSL_INCLUDE_DIRS})
    list(APPEND MORE_LIBRARIES ${OPENSSL_LIBRARIES})
  IF (PC_OPENSSL_FOUND)
      set(pkg_config_names_private "${pkg_config_names_private} openssl")
      list(APPEND OPTIONAL_LIBRARIES_STATIC ${PC_OPENSSL_STATIC_LDFLAGS})
  ELSE (PC_OPENSSL_FOUND)
      set(pkg_config_libs_private "${pkg_config_libs_private} -lopenssl")
  ENDIF (PC_OPENSSL_FOUND)
ELSE (OPENSSL_FOUND)
    message( FATAL_ERROR "openssl not found." )
ENDIF (OPENSSL_FOUND)

########################################################################
# version
########################################################################
set(FTY_COMMON_NUT_VERSION_MAJOR 1)
set(FTY_COMMON_NUT_VERSION_MINOR 0)
set(FTY_COMMON_NUT_VERSION_PATCH 0)
set(FTY_COMMON_NUT_VERSION "${FTY_COMMON_NUT_VERSION_MAJOR}.${FTY_COMMON_NUT_VERSION_MINOR}.${FTY_COMMON_NUT_VERSION_PATCH}")
message(STATUS "Detected FTY_COMMON_NUT Version - ${FTY_COMMON_NUT_VERSION}")


########################################################################
# includes
########################################################################
set (fty_common_nut_headers
    include/fty_common_nut_library.h
    include/fty_common_nut.h
    include/fty_common_nut_credentials.h
    include/fty_common_nut_convert.h
    include/fty_common_nut_dump.h
    include/fty_common_nut_parse.h
    include/fty_common_nut_scan.h
    include/fty_common_nut_utils.h
    src/fty_common_nut_utils_private.h
)

source_group ("Header Files" FILES ${fty_common_nut_headers})
install(FILES ${fty_common_nut_headers} DESTINATION include)

########################################################################
# library
########################################################################


include_directories("${SOURCE_DIR}/src" "${SOURCE_DIR}/include" "${CMAKE_BINARY_DIR}")
set (fty_common_nut_sources
    src/fty_common_nut_credentials.cc
    src/fty_common_nut_convert.cc
    src/fty_common_nut_dump.cc
    src/fty_common_nut_parse.cc
    src/fty_common_nut_scan.cc
    src/fty_common_nut_utils.cc
    src/fty_common_nut_utils_private.cc
)
IF (ENABLE_DRAFTS)
    list (APPEND fty_common_nut_sources
        src/fty_common_nut_private_selftest.cc
    )
ENDIF (ENABLE_DRAFTS)

source_group("Source Files" FILES ${fty_common_nut_sources})


option(FTY_COMMON_NUT_BUILD_SHARED "Whether or not to build the shared object" ON)
option(FTY_COMMON_NUT_BUILD_STATIC "Whether or not to build the static archive" ON)

if (NOT FTY_COMMON_NUT_BUILD_SHARED AND NOT FTY_COMMON_NUT_BUILD_STATIC)
  message(FATAL_ERROR "Neither static nor shared library build enabled")
endif()

IF (NOT MSVC)
  # avoid building everything twice for shared + static
  # only on *nix, as Windows needs different preprocessor defines in static builds
  add_library (fty_common_nut_objects OBJECT ${fty_common_nut_sources})
  set_property(TARGET fty_common_nut_objects PROPERTY POSITION_INDEPENDENT_CODE ON)
ENDIF (NOT MSVC)

# shared
if (FTY_COMMON_NUT_BUILD_SHARED)
  IF (MSVC)
    add_library(fty_common_nut SHARED ${fty_common_nut_sources})
  ELSE (MSVC)
    add_library(fty_common_nut SHARED $<TARGET_OBJECTS:fty_common_nut_objects>)
  ENDIF (MSVC)

  set_target_properties (fty_common_nut PROPERTIES
    PUBLIC_HEADER "${public_headers}"
    DEFINE_SYMBOL "FTY_COMMON_NUT_EXPORTS"
    SOVERSION "1"
    VERSION "${FTY_COMMON_NUT_VERSION}"
    COMPILE_DEFINITIONS "DLL_EXPORT"
    OUTPUT_NAME "fty_common_nut"
    PREFIX "lib"
  )

  target_link_libraries(fty_common_nut
    PUBLIC ${MORE_LIBRARIES}
  )

  install(TARGETS fty_common_nut
    EXPORT fty_common_nut-targets
    LIBRARY DESTINATION "lib${LIB_SUFFIX}" # .so file
    ARCHIVE DESTINATION "lib${LIB_SUFFIX}" # .lib file
    RUNTIME DESTINATION bin                # .dll file
  )

  target_include_directories(fty_common_nut
    PUBLIC
      $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
      $<INSTALL_INTERFACE:include>
  )
endif()

# static
if (FTY_COMMON_NUT_BUILD_STATIC)
  IF (MSVC)
    add_library(fty_common_nut-static STATIC ${fty_common_nut_sources})
  ELSE (MSVC)
    add_library(fty_common_nut-static STATIC $<TARGET_OBJECTS:fty_common_nut_objects>)
  ENDIF (MSVC)

  set_target_properties(fty_common_nut-static PROPERTIES
    PUBLIC_HEADER "${public_headers}"
    COMPILE_DEFINITIONS "FTY_COMMON_NUT_STATIC"
    OUTPUT_NAME "fty_common_nut"
    PREFIX "lib"
  )

  target_link_libraries(fty_common_nut-static
    PUBLIC ${MORE_LIBRARIES}
  )

  install(TARGETS fty_common_nut-static
    EXPORT fty_common_nut-targets
    LIBRARY DESTINATION "lib${LIB_SUFFIX}" # .so file
    ARCHIVE DESTINATION "lib${LIB_SUFFIX}" # .lib file
    RUNTIME DESTINATION bin                # .dll file
  )

  target_include_directories(fty_common_nut-static
    PUBLIC
      $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
      $<INSTALL_INTERFACE:include>
  )
  target_compile_definitions(fty_common_nut-static
    PUBLIC FTY_COMMON_NUT_STATIC
  )

endif()



########################################################################
# pkgconfig
########################################################################
set (VERSION "1.0.0")
set (prefix "${CMAKE_INSTALL_PREFIX}")
set (exec_prefix "\${prefix}")
set (libdir "\${prefix}/lib${LIB_SUFFIX}")
set (includedir "\${prefix}/include")
IF (ENABLE_DRAFTS)
    set (pkg_config_defines "-DFTY_COMMON_NUT_BUILD_DRAFT_API=1")
ELSE (ENABLE_DRAFTS)
    set (pkg_config_defines "")
ENDIF (ENABLE_DRAFTS)
configure_file(
    "${SOURCE_DIR}/src/libfty_common_nut.pc.in"
    "${SOURCE_DIR}/src/libfty_common_nut.pc"
@ONLY)

install(
    FILES "${SOURCE_DIR}/src/libfty_common_nut.pc"
    DESTINATION "lib${LIB_SUFFIX}/pkgconfig"
)

########################################################################
# installer
########################################################################
include(CMakePackageConfigHelpers)
if (WIN32)
  set(CMAKECONFIG_INSTALL_DIR "CMake" CACHE STRING "install path for fty_common_nutConfig.cmake")
else()
  # GNUInstallDirs "DATADIR" wrong here; CMake search path wants "share".
  set(CMAKECONFIG_INSTALL_DIR "share/cmake/fty_common_nut" CACHE STRING "install path for fty_common_nutConfig.cmake")
endif()

if (NOT CMAKE_VERSION VERSION_LESS 3.0)
  export(EXPORT fty_common_nut-targets
         FILE "${CMAKE_CURRENT_BINARY_DIR}/fty_common_nutTargets.cmake")
endif()
configure_package_config_file(builds/cmake/Config.cmake.in
                              "${CMAKE_CURRENT_BINARY_DIR}/fty_common_nutConfig.cmake"
                              INSTALL_DESTINATION ${CMAKECONFIG_INSTALL_DIR})
write_basic_package_version_file(${CMAKE_CURRENT_BINARY_DIR}/fty_common_nutConfigVersion.cmake
                                 VERSION ${FTY_COMMON_NUT_VERSION}
                                 COMPATIBILITY AnyNewerVersion)
install(EXPORT fty_common_nut-targets
        FILE fty_common_nutTargets.cmake
        DESTINATION ${CMAKECONFIG_INSTALL_DIR})
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/fty_common_nutConfig.cmake
              ${CMAKE_CURRENT_BINARY_DIR}/fty_common_nutConfigVersion.cmake
              DESTINATION ${CMAKECONFIG_INSTALL_DIR})

########################################################################
# executables
########################################################################
add_executable(
    fty_common_nut_selftest
    "${SOURCE_DIR}/src/fty_common_nut_selftest.cc"
)
if (TARGET fty_common_nut)
target_link_libraries(
    fty_common_nut_selftest
    fty_common_nut
    ${CXXTOOLS_LIBRARIES}
    ${LIBSODIUM_LIBRARIES}
    ${LIBZMQ_LIBRARIES}
    ${CZMQ_LIBRARIES}
    ${MALAMUTE_LIBRARIES}
    ${LOG4CPLUS_LIBRARIES}
    ${FTY-COMMON-LOGGING_LIBRARIES}
    ${FTY-COMMON_LIBRARIES}
    ${FTY-PROTO_LIBRARIES}
    ${FTY-COMMON-MLM_LIBRARIES}
    ${OPENSSL_LIBRARIES}
    ${OPTIONAL_LIBRARIES}
)
endif()
if (NOT TARGET fty_common_nut AND TARGET fty_common_nut-static)
target_link_libraries(
    fty_common_nut_selftest
    fty_common_nut-static
    ${CXXTOOLS_LIBRARIES}
    ${LIBSODIUM_LIBRARIES}
    ${LIBZMQ_LIBRARIES}
    ${CZMQ_LIBRARIES}
    ${MALAMUTE_LIBRARIES}
    ${LOG4CPLUS_LIBRARIES}
    ${FTY-COMMON-LOGGING_LIBRARIES}
    ${FTY-COMMON_LIBRARIES}
    ${FTY-PROTO_LIBRARIES}
    ${FTY-COMMON-MLM_LIBRARIES}
    ${OPENSSL_LIBRARIES}
    ${OPTIONAL_LIBRARIES}
    ${OPTIONAL_LIBRARIES_STATIC}
)
endif()

########################################################################
# tests
########################################################################
set(CLASSTEST_TIMEOUT 60 CACHE STRING "Timeout of the selftest of a class")
set(TOTAL_TIMEOUT 600 CACHE STRING "Timout of the total testsuite")

if(UNIX)
    find_program(MEMORYCHECK_COMMAND valgrind)
    set(MEMORYCHECK_COMMAND_OPTIONS "--leak-check=full --show-reachable=yes
                                     --error-exitcode=1
                                     --suppressions=src/.valgrind.supp")
endif()

set(TEST_CLASSES
    fty_common_nut_credentials
    fty_common_nut_convert
    fty_common_nut_dump
    fty_common_nut_parse
    fty_common_nut_scan
    fty_common_nut_utils
)

IF (ENABLE_DRAFTS)
    list (APPEND TEST_CLASSES
    private_classes
    )
ENDIF (ENABLE_DRAFTS)


add_custom_target(
    copy-selftest-ro ALL
    COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/src/selftest-ro ${CMAKE_BINARY_DIR}/src/selftest-ro
)

add_custom_target(
    make-selftest-rw ALL
    COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/src/selftest-rw
)

set_directory_properties(
    PROPERTIES
    ADDITIONAL_MAKE_CLEAN_FILES "${CMAKE_BINARY_DIR}/src/selftest-ro;${CMAKE_BINARY_DIR}/src/selftest-rw"
)

foreach(TEST_CLASS ${TEST_CLASSES})
    add_test(
        NAME ${TEST_CLASS}
        COMMAND fty_common_nut_selftest --continue --verbose --test ${TEST_CLASS}
    )
    set_tests_properties(
        ${TEST_CLASS}
        PROPERTIES TIMEOUT ${CLASSTEST_TIMEOUT}
    )
    set_tests_properties(
        ${TEST_CLASS}
        PROPERTIES DEPENDS "copy-selftest-ro;make-selftest-rw"
    )
endforeach(TEST_CLASS)

include(CTest)

########################################################################
# cleanup
########################################################################
add_custom_target (distclean @echo Cleaning for source distribution)

set(cmake_generated ${CMAKE_BINARY_DIR}/CMakeCache.txt
                    ${CMAKE_BINARY_DIR}/cmake_install.cmake
                    ${CMAKE_BINARY_DIR}/Makefile
                    ${CMAKE_BINARY_DIR}/CMakeFiles
                    ${CMAKE_BINARY_DIR}/CTestTestfile.cmake
                    ${CMAKE_BINARY_DIR}/DartConfiguration.tcl
                    ${CMAKE_BINARY_DIR}/Testing
                    ${CMAKE_BINARY_DIR}/compile_commands.json
                    ${CMAKE_BINARY_DIR}/platform.h
                    ${CMAKE_BINARY_DIR}/src/libfty_common_nut.pc
                    ${CMAKE_BINARY_DIR}/src/libfty_common_nut.so
                    ${CMAKE_BINARY_DIR}/src/fty-common-nut_selftest
                    ${CMAKE_BINARY_DIR}/src/fty_common_nut_selftest
)

add_custom_command(
    DEPENDS clean
    COMMENT "distribution clean"
    COMMAND rm
    ARGS    -rf CMakeTmp ${cmake_generated}
    TARGET  distclean
)

include(ClangFormat OPTIONAL)

########################################################################
# summary
########################################################################
message ("")
message (STATUS "******************* Configuration Summary *******************")
message (STATUS "General:")
message (STATUS "  Version           :   ${VERSION}")
message (STATUS "  System            :   ${CMAKE_SYSTEM_NAME}")
message (STATUS "  C compiler        :   ${CMAKE_C_COMPILER}")
message (STATUS "  Debug C flags     :   ${CMAKE_C_FLAGS_DEBUG} ${CMAKE_C_FLAGS}")
message (STATUS "  Release C flags   :   ${CMAKE_C_FLAGS_RELEASE} ${CMAKE_C_FLAGS}")
message (STATUS "  Build type        :   ${CMAKE_BUILD_TYPE}")
message (STATUS "  Static build      :   ${FTY_COMMON_NUT_BUILD_STATIC}")
message (STATUS "  Shared build      :   ${FTY_COMMON_NUT_BUILD_SHARED}")
IF (ENABLE_DRAFTS)
message (STATUS "  Draft API         :   Yes")
ELSE (ENABLE_DRAFTS)
message (STATUS "  Draft API         :   No")
ENDIF (ENABLE_DRAFTS)
message (STATUS "")
message (STATUS "Dependencies:")
include(FeatureSummary)
feature_summary (WHAT ALL FATAL_ON_MISSING_REQUIRED_PACKAGES)
message (STATUS "")
message (STATUS "Install:")
message (STATUS "  Install prefix    :" "${CMAKE_INSTALL_PREFIX}")
message (STATUS "")
message (STATUS "************************* Options ***************************")
message (STATUS "Options:")
message (STATUS "  Use the Draft API (default = yes):")
message (STATUS "  -DENABLE-DRAFTS=[yes|no]")
message (STATUS "")
message (STATUS "*************************************************************")
message (STATUS "Configuration complete! Now procced with:")
message (STATUS "  'make'                compile the project")
message (STATUS "  'make test'           run the project's selftest")
message (STATUS "  'make install'        install the project to ${CMAKE_INSTALL_PREFIX}")
message (STATUS "")
message (STATUS "Further options are:")
message (STATUS "  'ctest -T memcheck'   run the project's selftest with")
message (STATUS "                        valgrind to check for memory leaks")
message (STATUS "")

################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
